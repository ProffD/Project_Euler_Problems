#include <iostream>
#include <vector>
#include <functional>
#include <numeric>
#include <math.h>
#include <algorithm>
#include <chrono>


void sumOfMultiples(int maxNum);                  //Problem 1
void evenFibonacci(int maxNum);                   //Problem 2
void primeFactorsOf(unsigned long long  num);     //Problem 3
bool isPrime(int number);
void palindroneProduct(int nNumberDigits);        //Problem 4  Skipped
void smallestMultiple();                          //Problem 5
void sumSquareDifference(int number);             //Problem 6
void thenthPrime(int number);                     //Problem 7
void largestProductInaSeries(int number);         //Problem 8  Skipped
void specialPythagorianTriplets();                //Problem 9
void summationOfPrimes(int number);               //Problem 10


int main() {


    std::cout << "PROBLEM 1\n";
    sumOfMultiples(10);  //Problem Name: Multiples of 3 and 5
    std::cout << "===============================================\n";
    std::cout << "PROBLEM 2\n";
    evenFibonacci(10);
    std::cout << "\n===============================================\n";
    std::cout << "PROBLEM 3\n";
    primeFactorsOf(13195);
    //primeFactorsOf(600851475143ULL);
    std::cout << "\n===============================================\n";
    palindroneProduct(1);
    largestProductInaSeries(1);
    std::cout << "PROBLEM 5\n";
    smallestMultiple();
    std::cout << "\n===============================================\n";
    std::cout << "PROBLEM 6\n";
    sumSquareDifference(10);
    sumSquareDifference(100);
    std::cout << "\n===============================================\n";

    std::cout << "PROBLEM 7\n";
    thenthPrime(6);
    thenthPrime(10001);
    std::cout << "\n===============================================\n";
    std::cout << "PROBLEM 9\n";
    specialPythagorianTriplets();
    std::cout << "\n===============================================\n";
    std::cout << "PROBLEM 10\n";
    summationOfPrimes(10);
    summationOfPrimes(2000000);
    std::cout << "\n===============================================\n";


    return 0;
}
void sumOfMultiples(int maxNum)
{
    /* Problem Name: Multiples of 3 and 5
     If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
     The sum of these multiples is 23.
     Find the sum of all the multiples of 3 or 5 below 1000.
 */
    int sum = 0;
    std::cout<<"Multiples of 3 and 5 are: ";
    for(int i = 1; i <maxNum; i++)
    {
        if(i % 3 == 0 || i % 5 == 0){
            std::cout<<i <<" ";
            sum +=i;
        }
    }
    std::cout<<"\nSum of all Multiples of 3 or 5 is: "<< sum<<'\n';
}

void evenFibonacci(int maxNum) {
/*
 * Problem Name: Even Fibonacci numbers
   Each new term in the Fibonacci sequence is generated by adding the previous two terms.
   By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

   By considering the terms in the Fibonacci sequence whose values do not exceed four million,
   find the sum of the even-valued terms.
 */
    std::function<int(int)> Fib = [&Fib](int n){return n <= 2 ? n : Fib(n -1) + Fib(n - 2);};
    std::vector<int> fibSequence(maxNum);
    int i = 1;
    while(i <= maxNum)
    {
        fibSequence.push_back(Fib(i));
        std::cout<<Fib(i)<<" ";
        i++;
    }
    accumulate(fibSequence.begin(),fibSequence.end(),0);
    std::cout<<"\nSum of Even Numbers: "<< accumulate(fibSequence.begin(),fibSequence.end(),0,[](int sum,int n){return n % 2 == 0 ? n + sum: sum;});

}
void primeFactorsOf(unsigned long long num)
{

    /*
     * Problem Name: Largest prime factor
       The prime factors of 13195 are 5, 7, 13 and 29.
       What is the largest prime factor of the number 600851475143 ?
    */
    std::vector<int> primes;
    // std::cout<<"Prime Numbers:  ";
    for(int i =1; i<=num; i++){
        if(isPrime(i)){
            primes.push_back(i);
            //     std::cout<<i<<" ";   Print prime numbers
        }


    }
    std::vector<int> factors;
    for(auto f : primes){
        if(num%f == 0)
            factors.push_back(f);
    }
    std::cout<<"\nLargest Prime Factors of "<< num <<":  ";


    for(auto f : factors){
        std::cout<<f<<" ";
    }



}
bool isPrime(int number){
    /* if (number <= 1) return false;
     if (number == 2) return true;
     if (number % 2 == 0)  return false;

     auto boundary = static_cast<int>(floor(sqrt(number)));
     for (int i = 3; i <= boundary; i+=2)
     {
         if (number % i == 0) return false;
     }
     return true;
     */
    // OR
    if (number == 1) return false;
    if (number == 2) return true;

    auto limit = ceil(std::sqrt(number));
    for (int i = 2; i <= limit; ++i)  {
        if (number % i == 0)  return false;
    }

    return true;
}

void palindroneProduct(int nNumberDigits) {
/*
 * Problem Name: Largest palindrome product
   A palindromic number reads the same both ways. The largest palindrome made from the product
   of two 2-digit numbers is 9009 = 91 × 99.
   Find the largest palindrome made from the product of two 3-digit numbers.
 */


}

void smallestMultiple() {
    /*
     * Project Name: Smallest multiple
       2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
       What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     */
    auto start = std::chrono::system_clock::now().time_since_epoch();

    int  i =20;
    while (i %  2 != 0 || i %  3 != 0 || i %  4 != 0 || i %  5 != 0 ||
           i %  6 != 0 || i %  7 != 0 || i %  8 != 0 || i %  9 != 0 ||
           i % 10 != 0 || i % 11 != 0 || i % 12 != 0 || i % 13 != 0 ||
           i % 14 != 0 || i % 15 != 0 || i % 16 != 0 || i % 17 != 0 ||
           i % 18 != 0 || i % 19 != 0 || i % 20 != 0 ){
        i++;
    }
    auto stop = std::chrono::system_clock::now().time_since_epoch();

    std::cout<<"The Smallest Numbers Evenly Divisible by numbers from 1 to 20 is: "<< i <<'\n';
    std::chrono::duration<float> duration = stop - start;
    std::cout<<"Took: "<< duration.count()<<" milliseconds\n";



}

void thenthPrime(int number){


    /*
     * Problem Name: 10001st prime
       By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

        What is the 10 001st prime number?
     */
    std::vector<int> primes;

    int i = 1;
    while(primes.size() != number)
    {
        if(isPrime(i))
            primes.push_back(i);

        i++;
    }


    std::cout<<"\nThe "<<number<<"th prime is: "<< primes.at(number-1);

}
void sumSquareDifference(int number){
    /*
     * Problem Name: Sum square difference
      The sum of the squares of the first ten natural numbers is,
      1^2 + 2^2 + ... + 10^2 = 385
      The square of the sum of the first ten natural numbers is,

      (1 + 2 + ... + 10)^2 = 55^2 = 3025
      Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

       Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
     */
    std::vector<int> v(number);
    std::iota(v.begin(),v.end(),1);

    double sumOfSquares = accumulate(v.begin(),v.end(),0,[](int x,int y){return x+y*y;});
    double squareOfSum = pow(accumulate(v.begin(),v.end(),0,[](int x,int y){return x+y;}),2.0);
    std::cout<<"The difference between the sum of the squares of the first "<<number<<" natural numbers and the square of the sum is: "<<squareOfSum - sumOfSquares<<'\n';

}
void summationOfPrimes(int number){

    /*
     * Project Name: Summation of primes
       The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

        Find the sum of all the primes below two million.
     */
    std::vector<int> primes;

    for(int i = 1; i<number; i++){
        if(isPrime(i))
            primes.push_back(i);
    }
    std::cout<<"\nThe sum of the primes below "<<number<<" is : "<< accumulate(primes.begin(),primes.end(),0);


}

void specialPythagorianTriplets() {
    /*
     * Project Name: Special Pythagorean triplet
      A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
      a^2 + b^2 = c^2 For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
      There exists exactly one Pythagorean triplet for which a + b + c = 1000.
      Find the product abc.
     */

    for(int a = 1; a <=1000; a++)
        for(int b = a; b<=1000; b++) {
            int c = 1000 - a - b;
            if(c > 0)
                if(c*c == a*a + b*b ){
                    std::cout<<"The Product: "<< a*b*c;
                    break;
                }

        }
}

void largestProductInaSeries(int number) {
    /*
     * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
            73167176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            24219022671055626321111109370544217506941658960408
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450

            Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
                 */

}
